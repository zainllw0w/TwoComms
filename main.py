import asyncio
from app.keep_alive import keep_alive
import aiohttp
import json
import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ContentType,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

from app import buttons as kb
from app import database as db
import asyncio
import logging
from aiogram import Bot
from app.database import get_orders_not_delivered, update_order_status
from app.database import get_order_by_id


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))
BOT_TOKEN = os.environ.get("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
PRODUCTS_JSON_PATH = 'app/products.json'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AdminTtnFlow(StatesGroup):
    waiting_for_city = State()         # –ñ–¥—ë–º, –≤—ã–±–µ—Ä—É—Ç –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ö–∏–µ–≤/–•–∞—Ä—å–∫–æ–≤)
    waiting_for_payer = State()        # –ñ–¥—ë–º, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç (–Ω–∞–ª–æ–∂–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å)
    waiting_for_sender_branch = State() # –ñ–¥—ë–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è, –æ—Ç–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    waiting_for_confirm = State()       # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É, –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ¬´–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ¬ª
    waiting_for_manual_data = State()   # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –µ—Å–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–¢–ù –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é

class OrderStates(StatesGroup):
    waiting_for_size = State()
    waiting_for_options = State()
    waiting_for_payment_method = State()
    waiting_for_city = State()
    waiting_for_branch = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_payment_confirmation = State()
    waiting_for_payment_screenshot = State()
    waiting_for_paid_confirmation = State()

class DiscountStates(StatesGroup):
    waiting_for_ubd_photo = State()
    waiting_for_repost_screenshot = State()

class SupportStates(StatesGroup):
    waiting_for_issue_description = State()
    waiting_for_user_response = State()

class AdminInputStates(StatesGroup):
    admin_support_reply = State()
    order_rejection_reason = State()
    payment_rejection_reason = State()
    waiting_for_ttn = State()
    waiting_for_receipt = State()
    waiting_for_print_description = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def cmd_start(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer('üëã –í—ñ—Ç–∞—î–º–æ, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.admin_main_menu())
    else:
        await message.answer('üëã –í—ñ—Ç–∞—î–º–æ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=kb.main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É"
@dp.message(F.text == 'üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É')
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == ADMIN_ID:
        await message.answer('üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', reply_markup=kb.admin_main_menu())
    else:
        await message.answer('üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', reply_markup=kb.main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
@dp.message(F.text == 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def my_orders(message: Message):
    orders = await db.get_orders_by_user(message.from_user.id)
    if not orders:
        await message.answer(
            "üõí –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=kb.no_orders_menu()
        )
        return

    for order in orders:
        order_text = await format_order_text(order, order['id'], message.from_user.username, message.from_user.id)
        status = order.get('status', '‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π')
        await message.answer(
            f"{order_text}\n\nüü¢ –°—Ç–∞—Ç—É—Å: {status}",
            reply_markup=kb.order_details_button(order['id'])
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üõ†Ô∏è –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ"
@dp.message(F.text == 'üõ†Ô∏è –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ')
async def go_to_constructor(message: Message):
    await message.answer(
        'üõ†Ô∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:',
        reply_markup=kb.category_selection_menu()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
@dp.message(F.text == '‚öôÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚öôÔ∏è')
async def constructor_order(message: Message):
    await message.answer(
        'üõ†Ô∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:',
        reply_markup=kb.category_selection_menu()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–§—É—Ç–±–æ–ª–∫–∏ –∏–ª–∏ –•—É–¥—ñ)
@dp.message(F.text.in_(['üëï –§—É—Ç–±–æ–ª–∫–∏', 'ü•∑üèº –•—É–¥—ñ']))
async def select_category(message: Message, state: FSMContext):
    category = 't_shirts' if message.text == 'üëï –§—É—Ç–±–æ–ª–∫–∏' else 'hoodies'

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
    if category == 't_shirts':
        default_options = {
            'made_in_ukraine': True,
            'back_text': True,
            'back_print': True
        }
    else:  # hoodies
        default_options = {
            'sleeve_text': True,
        }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
    await state.update_data(category=category, options=default_options)

    await message.answer(
        'üìè –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:',
        reply_markup=kb.size_selection_menu()
    )
    await state.set_state(OrderStates.waiting_for_size)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üìè –†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞"
@dp.callback_query(OrderStates.waiting_for_size, F.data == 'size_chart')
async def size_chart(callback: CallbackQuery):
    await callback.message.answer("üìè –†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
@dp.callback_query(OrderStates.waiting_for_size, F.data.startswith('size_'))
async def select_size(callback: CallbackQuery, state: FSMContext):
    valid_sizes = ['S', 'M', 'L', 'XL', 'XXL']
    size = callback.data.split('_')[1]
    if size not in valid_sizes:
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    await state.update_data(size=size)
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å–ø–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞
    await display_product(callback.from_user.id, state)
    # –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
    # await state.clear()   # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
@dp.message(OrderStates.waiting_for_size, F.text == 'üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É')
async def back_to_main_from_size(message: Message, state: FSMContext):
    await back_to_main(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –æ–ø—Ü–∏–∏
@dp.callback_query(F.data.startswith('option_'))
async def toggle_option(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –æ–ø—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "made_in_ukraine"
    option_key = callback.data.split('_', maxsplit=1)[1]
    # –ó–∞–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    # –°–ª–æ–≤–∞—Ä—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    selected_options = data.get('options', {})
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (True -> False / False -> True)
    current_value = selected_options.get(option_key, False)
    selected_options[option_key] = not current_value
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ FSM
    await state.update_data(options=selected_options)
    # –í—ã–∑—ã–≤–∞–µ–º display_product, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏, —Ü–µ–Ω–æ–π –∏ —Ç.–ø.)
    await display_product(callback.from_user.id, state)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º ¬´–∫—Ä—É–≥¬ª –∫–æ–ª–ª–±—ç–∫–∞
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚û°Ô∏è –î–∞–ª—ñ"
@dp.callback_query(OrderStates.waiting_for_options, F.data == 'options_next')
async def proceed_to_product(callback: CallbackQuery, state: FSMContext):
    await display_product(callback.from_user.id, state)
    await state.set_state(None)
    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
from aiogram.types import InputMediaPhoto


async def display_product(user_id, state: FSMContext):
    data = await state.get_data()
    category = data.get('category')
    current_index = data.get('current_index', 0)
    current_color_index = data.get('current_color_index', 0)

    if not os.path.exists(PRODUCTS_JSON_PATH):
        await bot.send_message(user_id, "‚ùå –§–∞–π–ª–∞ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    with open(PRODUCTS_JSON_PATH, 'r', encoding='utf-8') as f:
        products = json.load(f)

    category_products = products.get(category, [])
    total_products = len(category_products)

    if current_index < 0 or current_index >= total_products:
        current_index = 0
        await state.update_data(current_index=current_index)

    product = category_products[current_index]
    model_name = product.get('model_name')
    colors = product.get('colors', [])
    total_colors = len(colors)

    if current_color_index < 0 or current_color_index >= total_colors:
        current_color_index = 0
        await state.update_data(current_color_index=current_color_index)

    selected_color_url = colors[current_color_index]
    # –î–ª—è —Ñ—É—Ç–±–æ–ª–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º cache buster
    image_url = selected_color_url


    await state.update_data(selected_product=product, selected_color_index=current_color_index)

    price, discount_text = await calculate_price(product, user_id)
    await state.update_data(price=price)

    selected_options = data.get('options', {})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
    options_text = ""
    if category == 't_shirts':
        if selected_options.get('made_in_ukraine'):
            options_text += "‚úÖ –ü—Ä–∏–Ω—Ç –±—ñ–ª—è —à–∏—ó\n"
        else:
            options_text += "‚ùå –ü—Ä–∏–Ω—Ç –±—ñ–ª—è —à–∏—ó\n"
        if selected_options.get('back_text'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—ñ–¥–ø–∏—Å\n"
        else:
            options_text += "‚ùå –ó–∞–¥–Ω—ñ–π –ø—ñ–¥–ø–∏—Å\n"
        if selected_options.get('back_print'):
            options_text += "‚úÖ –í–µ–ª–∏–∫–∏–π –ø—Ä–∏–Ω—Ç –Ω–∞ —Å–ø–∏–Ω—É\n"
        else:
            options_text += "‚ùå –í–µ–ª–∏–∫–∏–π –ø—Ä–∏–Ω—Ç –Ω–∞ —Å–ø–∏–Ω—É\n"
    elif category == 'hoodies':
        # –î–æ–±–∞–≤—å—Ç–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ö—É–¥—ñ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass

    options_text = "\n**–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:**\n" + options_text

    order_summary = (
        f"üìù **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
        f"üîπ **–¢–æ–≤–∞—Ä:** {model_name}\n"
        f"üìè **–†–æ–∑–º—ñ—Ä:** {data.get('size')}\n"
        f"üé® **–ö–æ–ª—ñ—Ä:** {current_color_index + 1} –∑ {total_colors}\n"
        f"üí∏ **–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:** {price} –≥—Ä–Ω\n"
        f"{discount_text}"
        f"{options_text}"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
    keyboard = kb.product_display_keyboard(current_index, total_products, current_color_index, total_colors, category,
                                           selected_options)

    product_message_id = data.get('product_message_id')
    if product_message_id:
        try:
            await bot.edit_message_media(
                chat_id=user_id,
                message_id=product_message_id,
                media=InputMediaPhoto(media=image_url, caption=order_summary, parse_mode='Markdown'),
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Error editing product photo: {e}")
    else:
        try:
            msg = await bot.send_photo(
                user_id,
                photo=image_url,
                caption=order_summary,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            await state.update_data(product_message_id=msg.message_id)
            logger.info(f"Displayed product to user {user_id}")
        except Exception as e:
            logger.error(f"Error sending product photo: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ –º–æ–¥–µ–ª—è–º
@dp.callback_query(F.data.in_(['next_product', 'prev_product']))
async def paginate_products(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get('category')
    current_index = data.get('current_index', 0)
    current_color_index = 0

    if not os.path.exists(PRODUCTS_JSON_PATH):
        await bot.send_message(callback.from_user.id, "‚ùå –§–∞–π–ª–∞ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    with open(PRODUCTS_JSON_PATH, 'r', encoding='utf-8') as f:
        products = json.load(f)

    category_products = products.get(category, [])
    total_products = len(category_products)

    if callback.data == 'next_product':
        current_index += 1
        if current_index >= total_products:
            current_index = 0
    elif callback.data == 'prev_product':
        current_index -= 1
        if current_index < 0:
            current_index = total_products - 1

    await state.update_data(current_index=current_index, current_color_index=current_color_index)

    await display_product(callback.from_user.id, state)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
@dp.callback_query(F.data.in_(['next_color', 'prev_color']))
async def paginate_colors(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get('category')
    current_index = data.get('current_index', 0)
    current_color_index = data.get('current_color_index', 0)

    if not os.path.exists(PRODUCTS_JSON_PATH):
        await bot.send_message(callback.from_user.id, "‚ùå –§–∞–π–ª–∞ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    with open(PRODUCTS_JSON_PATH, 'r', encoding='utf-8') as f:
        products = json.load(f)

    category_products = products.get(category, [])
    total_products = len(category_products)

    product = category_products[current_index]
    colors = product.get('colors', [])
    total_colors = len(colors)

    if callback.data == 'next_color':
        current_color_index += 1
        if current_color_index >= total_colors:
            current_color_index = 0
    elif callback.data == 'prev_color':
        current_color_index -= 1
        if current_color_index < 0:
            current_color_index = total_colors - 1

    await state.update_data(current_color_index=current_color_index)

    await display_product(callback.from_user.id, state)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –í–∏–±—Ä–∞—Ç–∏"
@dp.callback_query(F.data == 'select_product')
async def select_product(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get('category')
    size = data.get('size')
    current_index = data.get('current_index', 0)
    current_color_index = data.get('current_color_index', 0)
    selected_options = data.get('options', {})

    if not os.path.exists(PRODUCTS_JSON_PATH):
        await bot.send_message(callback.from_user.id, "‚ùå –§–∞–π–ª–∞ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    with open(PRODUCTS_JSON_PATH, 'r', encoding='utf-8') as f:
        products = json.load(f)

    category_products = products.get(category, [])
    total_products = len(category_products)

    if current_index < 0 or current_index >= total_products:
        await state.update_data(current_index=0)
        current_index = 0

    product = category_products[current_index]
    model_name = product.get('model_name')
    colors = product.get('colors', [])
    total_colors = len(colors)

    if current_color_index < 0 or current_color_index >= total_colors:
        current_color_index = 0
        await state.update_data(current_color_index=current_color_index)

    selected_color_url = colors[current_color_index]

    await state.update_data(selected_product=product, selected_color_index=current_color_index)
    await state.update_data(product_message_id=None)

    price, discount_text = await calculate_price(product, callback.from_user.id)
    await state.update_data(price=price)

    options_text = ""
    if category == 't_shirts':
        if selected_options.get('made_in_ukraine'):
            options_text += "‚úÖ Made in Ukraine –ø—Ä–∏–Ω—Ç\n"
        if selected_options.get('back_text'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—ñ–¥–ø–∏—Å\n"
        if selected_options.get('back_print'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—Ä–∏–Ω—Ç\n"
    elif category == 'hoodies':
        if selected_options.get('collar'):
            options_text += "‚úÖ –ì–æ—Ä–ª–æ–≤–∏–Ω–∞\n"
        if selected_options.get('sleeve_text'):
            options_text += "‚úÖ –ù–∞–¥–ø–∏—Å–∏ –Ω–∞ —Ä—É–∫–∞–≤–∞—Ö\n"
        if selected_options.get('back_print'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—Ä–∏–Ω—Ç\n"

    if options_text:
        options_text = "\n**–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:**\n" + options_text
    else:
        options_text = "\n**–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:**\n‚ùå –ù–µ–º–∞—î"

    order_summary = (
        f"üìù **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
        f"üîπ **–¢–æ–≤–∞—Ä:** {model_name}\n"
        f"üìè **–†–æ–∑–º—ñ—Ä:** {size}\n"
        f"üé® **–ö–æ–ª—ñ—Ä:** {current_color_index + 1} –∑ {total_colors}\n"
        f"üí∏ **–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:** {price} –≥—Ä–Ω\n"
        f"{discount_text}"
        f"{options_text}"
    )

    await callback.message.answer(
        order_summary,
        reply_markup=kb.payment_options(),
        parse_mode='Markdown'
    )
    await state.set_state(OrderStates.waiting_for_payment_method)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(OrderStates.waiting_for_payment_method, F.data.in_(['payment_card', 'payment_post']))
async def payment_method_selected(callback: CallbackQuery, state: FSMContext):
    payment_method = 'card' if callback.data == 'payment_card' else 'cash'
    await state.update_data(payment_method=payment_method)

    await callback.message.answer("üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:")
    await state.set_state(OrderStates.waiting_for_city)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(OrderStates.waiting_for_city)
async def order_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üè¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:")
    await state.set_state(OrderStates.waiting_for_branch)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
@dp.message(OrderStates.waiting_for_branch)
async def order_branch(message: Message, state: FSMContext):
    await state.update_data(branch=message.text)
    await message.answer("üßë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")
    await state.set_state(OrderStates.waiting_for_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(OrderStates.waiting_for_name)
async def order_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await state.set_state(OrderStates.waiting_for_phone)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
@dp.message(OrderStates.waiting_for_phone)
async def order_phone(message: Message, state: FSMContext):
    phone_number = message.text.strip()
    if not phone_number:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    await state.update_data(phone=phone_number)
    data = await state.get_data()
    payment_method = data.get('payment_method')

    if payment_method == 'cash':
        order_data = {
            'product': data.get('selected_product')['model_id'],
            'size': data.get('size'),
            'city': data.get('city'),
            'branch': data.get('branch'),
            'name': data.get('name'),
            'phone': data.get('phone'),
            'payment_method': payment_method,
            'status': '–ù–æ–≤–µ',
            'user_id': message.from_user.id,
            'back_print': data.get('options', {}).get('back_print', False),
            'back_text': data.get('options', {}).get('back_text', False),
            'made_in_ukraine': data.get('options', {}).get('made_in_ukraine', False),
            'collar': data.get('options', {}).get('collar', False),
            'sleeve_text': data.get('options', {}).get('sleeve_text', False),
            'price': data.get('price'),
            'selected_color_index': data.get('selected_color_index', 0)
        }

        order_id = await db.save_order(message.from_user.id, order_data)

        await message.answer("‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –î—è–∫—É—î–º–æ!")
        await state.clear()

        order = await db.get_order_by_id(order_id)
        order_text = await format_order_text(order, order_id, message.from_user.username, message.from_user.id)
        image_url = await get_order_image_url(order)
        statuses = get_statuses_from_order_status(order['status'])
        admin_message = await bot.send_photo(
            ADMIN_ID,
            photo=image_url,
            caption=f"üì¶ **–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}** –≤—ñ–¥ @{message.from_user.username}:\n{order_text}",
            reply_markup=kb.admin_order_actions(order_id, statuses=statuses)
        )
        await db.save_order_admin_message_id(order_id, admin_message.message_id)
    else:
        selected_product = data.get('selected_product')
        price = data.get('price')
        discount_text = ''

        await message.answer(
            f"üí≥ **–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É**\n\n"
            f"üí∞ **–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:** {price} –≥—Ä–Ω\n"
            f"üí≥ **–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:**\n"
            "```\n4441111140615463\n```"
            f"{discount_text}\n\n"
            f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—á–µ–Ω–æ' —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.",
            parse_mode='Markdown',
            reply_markup=kb.paid_button()
        )
        await state.set_state(OrderStates.waiting_for_paid_confirmation)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—á–µ–Ω–æ"
@dp.callback_query(OrderStates.waiting_for_paid_confirmation, F.data == 'paid_confirmed')
async def paid_confirmed(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üì∏ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –ø—Ä–æ –æ–ø–ª–∞—Ç—É.")
    await state.set_state(OrderStates.waiting_for_payment_screenshot)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(OrderStates.waiting_for_payment_screenshot, F.content_type == ContentType.PHOTO)
async def receive_payment_screenshot(message: Message, state: FSMContext):
    data = await state.get_data()

    order_data = {
        'product': data.get('selected_product')['model_id'],
        'size': data.get('size'),
        'city': data.get('city'),
        'branch': data.get('branch'),
        'name': data.get('name'),
        'phone': data.get('phone'),
        'payment_method': 'card',
        'status': '–û—á—ñ–∫—É—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏',
        'user_id': message.from_user.id,
        'back_print': data.get('options', {}).get('back_print', False),
        'back_text': data.get('options', {}).get('back_text', False),
        'made_in_ukraine': data.get('options', {}).get('made_in_ukraine', False),
        'collar': data.get('options', {}).get('collar', False),
        'sleeve_text': data.get('options', {}).get('sleeve_text', False),
        'price': data.get('price'),
        'selected_color_index': data.get('selected_color_index', 0)
    }

    order_id = await db.save_order(message.from_user.id, order_data)

    admin_message = await bot.send_photo(
        ADMIN_ID,
        message.photo[-1].file_id,
        caption=f"üí≥ **–°–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥ @{message.from_user.username} –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}**",
        reply_markup=kb.payment_approval_buttons(message.from_user.id, order_id)
    )
    await db.save_order_admin_message_id(order_id, admin_message.message_id)

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –ø–ª–∞—Ç—ñ–∂ –∑–∞—Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç—ñ.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ä–µ–ø–æ—Å—Ç–∞
@dp.message(DiscountStates.waiting_for_repost_screenshot, F.content_type == ContentType.PHOTO)
async def receive_repost_screenshot(message: Message, state: FSMContext):
    admin_message = await bot.send_photo(
        ADMIN_ID,
        message.photo[-1].file_id,
        caption=f"üîÑ **–†–µ–ø–æ—Å—Ç –≤—ñ–¥ @{message.from_user.username}**",
        reply_markup=kb.approval_buttons('repost', message.from_user.id)
    )
    await db.save_discount_admin_message_id(message.from_user.id, 'repost', admin_message.message_id)

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –£–ë–î
@dp.message(DiscountStates.waiting_for_ubd_photo, F.content_type == ContentType.PHOTO)
async def receive_ubd_photo(message: Message, state: FSMContext):
    admin_message = await bot.send_photo(
        ADMIN_ID,
        message.photo[-1].file_id,
        caption=f"üÜî **–£–ë–î –≤—ñ–¥ @{message.from_user.username}**",
        reply_markup=kb.approval_buttons('ubd', message.from_user.id)
    )
    await db.save_discount_admin_message_id(message.from_user.id, 'ubd', admin_message.message_id)

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫
@dp.callback_query(F.data.startswith('approve_') & ~F.data.startswith('approve_payment_'))
async def admin_approve_discount(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    discount_type = data[1]
    user_id = int(data[2])

    try:
        user_chat = await bot.get_chat(user_id)
        user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
    except Exception:
        user_username = f"User ID: {user_id}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –≤ –ë–î
    await db.add_discount(user_id, discount_type)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await bot.send_message(ADMIN_ID,
                               f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–Ω–∏–∂–∫—É '{discount_type.upper()}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_username}.")
    except Exception as e:
        logger.error(f"Error sending message to admin: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞ '{discount_type.upper()}' –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"Error sending discount approval message to user {user_id}: {e}")

    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error updating reply_markup: {e}")

    await callback.answer("–°—Ö–≤–∞–ª–µ–Ω–æ")


@dp.callback_query(F.data.startswith('reject_') & ~F.data.startswith('reject_payment_'))
async def admin_reject_discount(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    parts = data.split('_')
    discount_type = parts[1]
    user_id = int(parts[2])

    await state.update_data(discount_type=discount_type, user_id=user_id, admin_message_id=callback.message.message_id)
    await callback.message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∏:")
    await state.set_state(AdminInputStates.order_rejection_reason)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –¥–ª—è —Å–∫–∏–¥–æ–∫
@dp.message(AdminInputStates.order_rejection_reason)
async def process_discount_rejection_reason(message: Message, state: FSMContext):
    reason = message.text.strip()
    if not reason:
        await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É.")
        return

    data = await state.get_data()
    discount_type = data.get('discount_type')
    user_id = data.get('user_id')
    admin_message_id = data.get('admin_message_id')

    if discount_type not in {'ubd', 'repost'}:
        await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ —Ç–∏–ø –∑–Ω–∏–∂–∫–∏.")
        await state.clear()
        return

    await db.remove_discount(user_id, discount_type)
    await db.save_discount_rejection_reason(user_id, discount_type, reason)

    try:
        user_chat = await bot.get_chat(user_id)
        user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
    except Exception:
        user_username = f"User ID: {user_id}"

    reject_text = f"‚ùå –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞ '{discount_type.upper()}' –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    try:
        await bot.send_message(user_id, reject_text)
    except Exception as e:
        logger.error(f"Error sending discount rejection message to user {user_id}: {e}")

    try:
        admin_message = await bot.edit_message_caption(
            chat_id=ADMIN_ID,
            message_id=admin_message_id,
            caption=f"{callback.message.caption}\n\n‚ùå –ó–Ω–∏–∂–∫—É '{discount_type.upper()}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_username} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        await bot.edit_message_reply_markup(
            chat_id=ADMIN_ID,
            message_id=admin_message_id,
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"Error updating admin message with rejection reason: {e}")

    await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data.startswith('approve_payment_'))
async def admin_approve_payment(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    user_id = int(data[2])
    order_id = int(data[3])

    try:
        user_chat = await bot.get_chat(user_id)
        user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
    except Exception:
        user_username = f"User ID: {user_id}"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ
    await db.update_order_status(order_id, '–û–ø–ª–∞—á–µ–Ω–æ')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"Error sending payment approval message to user {user_id}: {e}")

    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error updating reply_markup: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    try:
        await process_order_for_admin(order_id, user_username, user_id)
    except Exception as e:
        logger.error(f"Error processing order for admin: {e}")

    await callback.answer("–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")


@dp.callback_query(F.data.startswith('reject_payment_'))
async def admin_reject_payment(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    parts = data.split('_')
    user_id = int(parts[2])
    order_id = int(parts[3])

    await state.update_data(order_id=order_id, user_id=user_id, admin_message_id=callback.message.message_id)
    await callback.message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏:")
    await state.set_state(AdminInputStates.payment_rejection_reason)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
@dp.message(AdminInputStates.payment_rejection_reason)
async def process_payment_rejection_reason(message: Message, state: FSMContext):
    reason = message.text.strip()
    if not reason:
        await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É.")
        return

    data = await state.get_data()
    order_id = data.get('order_id')
    user_id = data.get('user_id')
    admin_message_id = data.get('admin_message_id')

    if not order_id or not user_id:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        await state.clear()
        return

    await db.update_order_status(order_id, '–û–ø–ª–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞')
    await db.save_order_rejection_reason(order_id, reason)

    try:
        user_chat = await bot.get_chat(user_id)
        user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
    except Exception:
        user_username = f"User ID: {user_id}"

    reject_text = f"‚ùå –û–ø–ª–∞—Ç–∞ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    try:
        await bot.send_message(user_id, reject_text)
    except Exception as e:
        logger.error(f"Error sending payment rejection message to user {user_id}: {e}")

    try:
        admin_message = await bot.edit_message_caption(
            chat_id=ADMIN_ID,
            message_id=admin_message_id,
            caption=f"{callback.message.caption}\n\n‚ùå –û–ø–ª–∞—Ç—É –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        await bot.edit_message_reply_markup(
            chat_id=ADMIN_ID,
            message_id=admin_message_id,
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"Error updating admin message with rejection reason: {e}")

    await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã
async def calculate_price(product, user_id):
    base_price = 1150 if product.get('model_id', '').startswith('ts') else 1350
    total_discount = 0.0
    discounts = await db.get_user_discounts(user_id)
    discount_details = []

    if discounts.get('ubd'):
        total_discount += 0.10
        discount_details.append('üéñÔ∏è 10% –∑–∞ –£–ë–î')
    if discounts.get('repost'):
        total_discount += 0.10
        discount_details.append('üîÑ 10% –∑–∞ —Ä–µ–ø–æ—Å—Ç')

    final_price = base_price * (1 - total_discount)
    final_price = int(final_price)

    if discount_details:
        discount_text = f"üéÅ **–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞:** {' + '.join(discount_details)}"
    else:
        discount_text = "üéÅ **–ó–Ω–∏–∂–∫–∏ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ**"

    return final_price, discount_text


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def format_order_text(order, order_id, username, user_id):
    product_code = order.get('product')
    product = '–§—É—Ç–±–æ–ª–∫–∞' if product_code.startswith('ts') else '–•—É–¥—ñ'
    size = order.get('size', '–ù–µ –æ–±—Ä–∞–Ω–æ')

    discounts = await db.get_user_discounts(user_id)
    discounts_text = []
    if discounts.get('ubd'):
        discounts_text.append('üéñÔ∏è –£–ë–î - 10%')
    if discounts.get('repost'):
        discounts_text.append('üîÑ –†–µ–ø–æ—Å—Ç - 10%')
    discounts_str = ', '.join(discounts_text) if discounts_text else '‚ùå –ù–µ–º–∞—î'

    price = order.get('price', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')

    options_text = ""
    if product == '–§—É—Ç–±–æ–ª–∫–∞':
        if order.get('made_in_ukraine'):
            options_text += "‚úÖ Made in Ukraine –ø—Ä–∏–Ω—Ç\n"
        if order.get('back_text'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—ñ–¥–ø–∏—Å\n"
        if order.get('back_print'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—Ä–∏–Ω—Ç\n"
    elif product == '–•—É–¥—ñ':
        if order.get('sleeve_text'):
            options_text += "‚úÖ –ü—Ä–∏–Ω—Ç –Ω–∞ —Ä—É–∫–∞–≤–∞—Ö\n"

    if options_text:
        options_text = "\n**–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:**\n" + options_text
    else:
        options_text = "\n**–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:**\n‚ùå –ù–µ–º–∞—î"

    rejection_reason_text = ""
    if order.get('rejection_reason'):
        rejection_reason_text = f"\n‚ùå **–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:** {order.get('rejection_reason')}"

    ttn_text = ""
    if order.get('ttn'):
        ttn_text = f"\nüì¶ **–¢–¢–ù:** {order.get('ttn')}"

    text = (
        f"üìù **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}**\n"
        f"üõçÔ∏è **–¢–æ–≤–∞—Ä:** {product}\n"
        f"üìè **–†–æ–∑–º—ñ—Ä:** {size}\n"
        f"üèôÔ∏è **–ú—ñ—Å—Ç–æ:** {order.get('city')}\n"
        f"üè¢ **–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:** {order.get('branch')}\n"
        f"üßë **–ü–Ü–ë:** {order.get('name')}\n"
        f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {order.get('phone')}\n"
        f"üí≥ **–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:** {'üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É' if order.get('payment_method') == 'card' else 'üí∞ –ü–ª–∞—Ç–∞ –Ω–∞ –ø–æ—à—Ç—ñ'}\n"
        f"üéñÔ∏è **–ó–Ω–∏–∂–∫–∏:** {discounts_str}\n"
        f"üí∏ **–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:** {price} –≥—Ä–Ω"
        f"{options_text}"
        f"{rejection_reason_text}"
        f"{ttn_text}"
    )
    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
def get_statuses_from_order_status(order_status):
    statuses = {
        'ready': False,
        'sent': False,
        'delivered': False
    }
    if order_status in ['–ù–æ–≤–µ', '–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞', '–û—á—ñ–∫—É—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏', '–û–ø–ª–∞—á–µ–Ω–æ']:
        statuses['ready'] = False
    elif order_status == '–ì–æ—Ç–æ–≤–æ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏':
        statuses['ready'] = True
    elif order_status == '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':
        statuses['ready'] = True
        statuses['sent'] = True
    elif order_status == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
        statuses['ready'] = True
        statuses['sent'] = True
        statuses['delivered'] = True
    return statuses


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def get_order_image_url(order):
    if not os.path.exists(PRODUCTS_JSON_PATH):
        return "https://i.ibb.co/cx351Lx/1-2.png"

    with open(PRODUCTS_JSON_PATH, 'r', encoding='utf-8') as f:
        products = json.load(f)
    category = 't_shirts' if order['product'].startswith('ts') else 'hoodies'
    category_products = products.get(category, [])
    product_data = next((p for p in category_products if p['model_id'] == order['product']), None)
    if not product_data:
        image_url = "https://i.ibb.co/cx351Lx/1-2.png"
    else:
        selected_color_index = order.get('selected_color_index', 0)
        colors = product_data['colors']
        if colors:
            image_url = colors[selected_color_index % len(colors)]
        else:
            image_url = "https://i.ibb.co/cx351Lx/1-2.png"
    return image_url


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "üî• –ú–æ—ó –∞–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏"
@dp.message(F.text == 'üî• –ú–æ—ó –∞–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏')
async def my_promotions(message: Message):
    discounts = await db.get_user_discounts(message.from_user.id)
    discount_texts = []
    if discounts.get('ubd'):
        discount_texts.append('üéñÔ∏è 10% –∑–∞ –£–ë–î')
    if discounts.get('repost'):
        discount_texts.append('üîÑ 10% –∑–∞ —Ä–µ–ø–æ—Å—Ç')
    discounts_str = ', '.join(discount_texts) if discount_texts else '‚ùå –ù–µ–º–∞—î'

    one_time_discount_used = await db.is_one_time_discount_used(message.from_user.id)
    if discounts.get('repost') and one_time_discount_used:
        discounts_str += "\n‚ùóÔ∏è –ó–Ω–∏–∂–∫—É –∑–∞ —Ä–µ–ø–æ—Å—Ç –≤–∂–µ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ."
    elif not discounts.get('repost') and one_time_discount_used:
        discounts_str += "\n‚ùóÔ∏è –ó–Ω–∏–∂–∫—É –∑–∞ —Ä–µ–ø–æ—Å—Ç –≤–∂–µ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ."

    keyboard_buttons = []
    if not discounts.get('ubd'):
        keyboard_buttons.append([KeyboardButton(text='üì∑ –ü–æ–∫–∞–∑–∞—Ç–∏ –£–ë–î')])
    if not discounts.get('repost') and not one_time_discount_used:
        keyboard_buttons.append([KeyboardButton(text='üîó –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–∫—Ä—ñ–Ω —Ä–µ–ø–æ—Å—Ç—É')])
    keyboard_buttons.append([KeyboardButton(text='üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É')])
    keyboard = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)

    await message.answer(
        f"üéÅ **–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!**\n\n"
        f"–û—Ç—Ä–∏–º–∞–π—Ç–µ –∑–Ω–∏–∂–∫—É **10%** –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ **10%** –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç—ñ –Ω–∞—à–æ–≥–æ –ø–æ—Å—Ç—É –≤ Instagram!\n\n"
        f"üîπ **–ê–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ –∑–Ω–∏–∂–∫–∏:** {discounts_str}",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üì∑ –ü–æ–∫–∞–∑–∞—Ç–∏ –£–ë–î"
@dp.message(F.text == 'üì∑ –ü–æ–∫–∞–∑–∞—Ç–∏ –£–ë–î')
async def send_ubd(message: Message, state: FSMContext):
    await message.answer("üì∑ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ –£–ë–î.")
    await state.set_state(DiscountStates.waiting_for_ubd_photo)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîó –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–∫—Ä—ñ–Ω —Ä–µ–ø–æ—Å—Ç—É"
@dp.message(F.text == 'üîó –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–∫—Ä—ñ–Ω —Ä–µ–ø–æ—Å—Ç—É')
async def send_repost(message: Message, state: FSMContext):
    await message.answer("üì∏ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ä–µ–ø–æ—Å—Ç—É –∑ Instagram.")
    await state.set_state(DiscountStates.waiting_for_repost_screenshot)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí¨ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
@dp.message(F.text == 'üí¨ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞')
async def info_support(message: Message):
    await message.answer(
        '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:',
        reply_markup=kb.info_support_buttons()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"
@dp.message(F.text == 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é')
async def contact_support(message: Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.")
    await state.set_state(SupportStates.waiting_for_issue_description)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(SupportStates.waiting_for_issue_description)
async def receive_issue_description(message: Message, state: FSMContext):
    issue_text = message.text.strip()
    if not issue_text:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ.")
        return

    issue_id = await db.save_user_issue(message.from_user.id, issue_text)

    await bot.send_message(
        ADMIN_ID,
        f"üì© **–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≤—ñ–¥ @{message.from_user.username}:**\n\n{issue_text}",
        reply_markup=kb.admin_support_reply_button(issue_id)
    )

    await message.answer(
        "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        reply_markup=kb.back_to_main_menu()
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.callback_query(F.data.startswith('support_reply_'))
async def admin_support_reply(callback: CallbackQuery, state: FSMContext):
    issue_id = int(callback.data.split('_')[-1])
    await state.update_data(issue_id=issue_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:")
    await state.set_state(AdminInputStates.admin_support_reply)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(AdminInputStates.admin_support_reply)
async def admin_support_send_reply(message: Message, state: FSMContext):
    reply_text = message.text.strip()
    if not reply_text:
        await message.answer("‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.")
        return

    data = await state.get_data()
    issue_id = data.get('issue_id')
    issue = await db.get_user_issue(issue_id)
    if not issue:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await state.clear()
        return

    user_id = issue['user_id']
    await bot.send_message(
        user_id,
        f"üì© **–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:**\n\n{reply_text}",
        reply_markup=kb.support_response_options()
    )
    await message.answer("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.callback_query(F.data.in_(['support_resolved', 'support_more_question']))
async def user_support_response(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'support_resolved':
        await callback.message.answer("üòä –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! –Ø–∫—â–æ —É –≤–∞—Å –±—É–¥—É—Ç—å —â–µ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è.")
        await state.clear()
    elif callback.data == 'support_more_question':
        await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.")
        await state.set_state(SupportStates.waiting_for_issue_description)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—Ä–µ–Ω–¥"
@dp.message(F.text == '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—Ä–µ–Ω–¥')
async def brand_info(message: Message):
    await message.answer(
        '–ù–∞—à –±—Ä–µ–Ω–¥ –∑–∞–π–º–∞—î—Ç—å—Å—è –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è–º —è–∫—ñ—Å–Ω–æ–≥–æ –æ–¥—è–≥—É –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –ø—Ä–∏–Ω—Ç–∞–º–∏. –ú–∏ —Ü—ñ–Ω—É—î–º–æ –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑—Ä—É—á–Ω–∏–º –¥–ª—è –≤–∞—Å.',
        reply_markup=kb.back_to_main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üñºÔ∏è –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∏–Ω—Ç"
@dp.message(F.text == 'üñºÔ∏è –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∏–Ω—Ç')
async def propose_print(message: Message, state: FSMContext):
    await message.answer("üì∑ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø—Ä–∏–Ω—Ç–∞.")
    await state.set_state(AdminInputStates.waiting_for_print_description)
    await state.update_data(propose_print=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(AdminInputStates.waiting_for_print_description, F.content_type == ContentType.PHOTO)
async def receive_print_image(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get('propose_print'):
        await bot.send_photo(
            ADMIN_ID,
            message.photo[-1].file_id,
            caption=f"üé® **–ù–æ–≤–∏–π –ø—Ä–∏–Ω—Ç –≤—ñ–¥ @{message.from_user.username}**",
        )
        await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –ø—Ä–∏–Ω—Ç –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.")
        await state.clear()
    else:
        pass


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "ü§ù –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏—Ü—Ç–≤–æ"
@dp.message(F.text == 'ü§ù –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏—Ü—Ç–≤–æ')
async def cooperation(message: Message):
    await message.answer(
        '–Ø–∫—â–æ –≤–∏ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ —É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏—Ü—Ç–≤—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: @zainllw0w',
        reply_markup=kb.back_to_main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == 'üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def admin_orders(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:',
            reply_markup=kb.admin_orders_menu()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìÇ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ"
@dp.message(F.text == 'üìÇ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ')
async def processing_orders(message: Message):
    if message.from_user.id == ADMIN_ID:
        orders = await db.get_orders_not_delivered()
        if not orders:
            await message.answer('–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ –æ–±—Ä–æ–±—Ü—ñ.', reply_markup=kb.admin_main_menu())
            return

        for order in orders:
            order_text = await format_order_text(order, order['id'], '', order['user_id'])
            statuses = get_statuses_from_order_status(order['status'])
            image_url = await get_order_image_url(order)
            user_username = ''
            try:
                user_chat = await bot.get_chat(order['user_id'])
                user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
            except Exception:
                user_username = f"User ID: {order['user_id']}"
            admin_message = await bot.send_photo(
                message.from_user.id,
                photo=image_url,
                caption=f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['id']} –≤—ñ–¥ {user_username}:\n{order_text}",
                reply_markup=kb.admin_order_actions(order['id'], statuses=statuses)
            )
            await db.save_order_admin_message_id(order['id'], admin_message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìÇ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
@dp.message(F.text == 'üìÇ –í–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def completed_orders(message: Message):
    if message.from_user.id == ADMIN_ID:
        orders = await db.get_orders_by_status('–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
        if not orders:
            await message.answer('–ù–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.', reply_markup=kb.admin_main_menu())
            return

        for order in orders:
            order_text = await format_order_text(order, order['id'], '', order['user_id'])
            image_url = await get_order_image_url(order)
            user_username = ''
            try:
                user_chat = await bot.get_chat(order['user_id'])
                user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
            except Exception:
                user_username = f"User ID: {order['user_id']}"
            await bot.send_photo(
                message.from_user.id,
                photo=image_url,
                caption=f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['id']} –≤—ñ–¥ {user_username}:\n{order_text}",
                reply_markup=None
            )


@dp.callback_query(F.data.startswith('order_'))
async def admin_order_action(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞:
     - order_ready_{id}
     - order_sent_{id}
     - order_details_{id}
     - order_create_ttn_{id}
    """
    data = callback.data
    parts = data.split('_')
    # –ü—Ä–∏–º–µ—Ä—ã:
    #  - "order_ready_7" => parts = ["order", "ready", "7"]
    #  - "order_sent_7" => parts = ["order", "sent", "7"]
    #  - "order_details_7" => parts = ["order", "details", "7"]
    #  - "order_create_ttn_7" => parts = ["order", "create", "ttn", "7"]

    if len(parts) < 3:
        await callback.answer('–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.')
        return

    main_action = parts[1]  # "ready" / "sent" / "details" / "create" –∏ —Ç.–ø.

    # --------------------------
    # 1) –û–ë–†–ê–ë–û–¢–ö–ê "order_create_ttn_{id}"
    # --------------------------
    if main_action == "create":
        # –ó–Ω–∞—á–∏—Ç —É –Ω–∞—Å –Ω–µ—á—Ç–æ –≤—Ä–æ–¥–µ "order_create_ttn_10"
        if len(parts) < 4:
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
            return

        sub_action = parts[2]  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "ttn"
        if sub_action != "ttn":
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –ø—ñ–¥–¥—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.")
            return

        try:
            order_id = int(parts[3])
        except ValueError:
            await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç order_id.")
            return

        # –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        order = await db.get_order_by_id(order_id)
        if not order:
            await callback.answer('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
            return

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ FSM AdminTtnFlow:
        #  1) —Å–æ—Ö—Ä–∞–Ω–∏–º order_id –≤ state
        #  2) —Å–ø—Ä–æ—Å–∏–º —É –∞–¥–º–∏–Ω–∞ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–ö–∏–µ–≤/–•–∞—Ä—å–∫–æ–≤)
        await state.update_data(order_id=order_id)
        await state.set_state(AdminTtnFlow.waiting_for_city)

        # –í—ã–≤–µ–¥–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–ö–∏—ó–≤', callback_data='sender_city_kyiv'),
                InlineKeyboardButton(text='–•–∞—Ä–∫—ñ–≤', callback_data='sender_city_kharkiv')
            ]
        ])
        await callback.message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:",
            reply_markup=keyboard
        )
        await callback.answer()
        return

    # --------------------------
    # 2) –û–ë–†–ê–ë–û–¢–ö–ê "order_ready_{id}", "order_sent_{id}", "order_delivered_{id}",
    #    "order_cancel_{id}", "order_details_{id}"
    # --------------------------
    # –µ—Å–ª–∏ main_action != "create", –∑–Ω–∞—á–∏—Ç –æ–±—ã—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
    try:
        order_id = int(parts[2])  # –±–µ—Ä–µ–º order_id –∏–∑ parts[2]
    except ValueError:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    order = await db.get_order_by_id(order_id)
    if not order:
        await callback.answer('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        return

    user_id = order['user_id']
    admin_message_id = order.get('admin_message_id')

    if main_action == 'ready':
        await db.update_order_status(order_id, '–ì–æ—Ç–æ–≤–æ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏')
        await bot.send_message(user_id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")

    elif main_action == 'sent':
        # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –¢–¢–ù –≤—Ä—É—á–Ω—É—é
        await callback.message.answer("üì¶ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¢–¢–ù –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
        await state.update_data(order_id=order_id, user_id=user_id)
        await state.set_state(AdminInputStates.waiting_for_ttn)
        await callback.answer()
        return

    elif main_action == 'delivered':
        await db.update_order_status(order_id, '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
        await bot.send_message(user_id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")

    elif main_action == 'cancel':
        await db.update_order_status(order_id, '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ')
        await bot.send_message(user_id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

    elif main_action == 'details':
        local_status = order.get('status', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
        ttn = order.get('ttn')
        order_text = await format_order_text(
            order,
            order_id,
            callback.from_user.username,
            callback.from_user.id
        )
        if not ttn:
            message_text = (
                f"{order_text}\n\n"
                f"–°—Ç–∞—Ç—É—Å (–∑ –ë–î): {local_status}\n"
                f"TTN: –ù–µ–º–∞—î\n"
            )
        else:
            np_status = await get_nova_poshta_status(ttn)  # –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
            message_text = (
                f"{order_text}\n\n"
                f"üì¶ **–°—Ç–∞—Ç—É—Å –ù–ü**: {np_status}\n"
                f"TTN: {ttn}"
            )
        await callback.message.answer(message_text, parse_mode='Markdown')
    else:
        await callback.answer('–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.')
        return

    # --------------------------
    # 3) –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: –æ–±–Ω–æ–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # --------------------------
    # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –æ–Ω –ø–æ–º–µ–Ω—è–ª—Å—è)
    order = await db.get_order_by_id(order_id)
    statuses = get_statuses_from_order_status(order['status'])
    try:
        await bot.edit_message_reply_markup(
            chat_id=ADMIN_ID,
            message_id=admin_message_id,
            reply_markup=kb.admin_order_actions(order_id, statuses=statuses)
        )
    except Exception as e:
        logger.error(f"Error updating admin message: {e}")

    await callback.answer('–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.')




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¢–¢–ù –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(AdminInputStates.waiting_for_ttn)
async def admin_receive_ttn(message: Message, state: FSMContext):
    ttn = message.text.strip()
    data = await state.get_data()
    order_id = data.get('order_id')
    user_id = data.get('user_id')

    if not ttn:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¢–¢–ù –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return

    await db.update_order_ttn(order_id, ttn)
    await db.update_order_status(order_id, '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await bot.send_message(user_id, f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n–ù–æ–º–µ—Ä –¢–¢–ù: {ttn}")

    order = await db.get_order_by_id(order_id)
    statuses = get_statuses_from_order_status(order['status'])
    await message.reply("‚úÖ –¢–¢–ù –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    await state.clear()

    admin_message_id = order.get('admin_message_id')
    try:
        await bot.edit_message_reply_markup(
            chat_id=ADMIN_ID,
            message_id=admin_message_id,
            reply_markup=kb.admin_order_actions(order_id, statuses=statuses)
        )
    except Exception as e:
        logger.error(f"Error updating admin message: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await db.init_db()
    await dp.start_polling(bot, on_startup=on_startup)


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def background_task():
    while True:
        fetch_and_update_products()
        await asyncio.sleep(1200)


async def on_startup(dp: Dispatcher):
    asyncio.create_task(background_task())
    logger.info(f"[{datetime.now()}] –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑–∞–ø—É—â–µ–Ω–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, Replit)
from flask import Flask
from threading import Thread

app_flask = Flask(__name__)


@app_flask.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"


def run_flask():
    app_flask.run(host='0.0.0.0', port=8080)


def start_flask():
    thread = Thread(target=run_flask)
    thread.start()


# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø–∫ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞"
@dp.callback_query(F.data == 'how_delivery')
async def how_delivery_handler(callback: CallbackQuery):
    text = (
        "üöö **–î–æ—Å—Ç–∞–≤–∫–∞**\n\n"
        "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é.\n"
        "–û–ø–ª–∞—Ç–∏—Ç–∏ –º–æ–∂–Ω–∞ —è–∫ –Ω–∞–∫–ª–∞–¥–µ–Ω–∏–º –ø–ª–∞—Ç–µ–∂–µ–º –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ, "
        "—Ç–∞–∫ —ñ –Ω–∞ –∫–∞—Ä—Ç—É ‚Äì —É —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–∞–∫–æ–∂ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é.\n\n"
        "–Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ –∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –≤—ñ–¥—Ä–∞–∑—É –Ω–∞ –∫–∞—Ä—Ç—É, –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –í–∞—Å ‚Äì –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞."
    )
    await callback.message.answer(text, parse_mode='Markdown')
    await callback.answer()


# ======================================================================
# 2. –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É

async def process_order_for_admin(order_id, user_username, user_id):
    order = await db.get_order_by_id(order_id)
    order_text = await format_order_text(order, order_id, user_username, user_id)
    statuses = get_statuses_from_order_status(order['status'])
    image_url = await get_order_image_url(order)
    admin_message = await bot.send_photo(
        ADMIN_ID,
        photo=image_url,
        caption=f"üì¶ **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}** –≤—ñ–¥ {user_username}:\n{order_text}",
        reply_markup=kb.admin_order_actions(order_id, statuses=statuses)
    )
    await db.save_order_admin_message_id(order_id, admin_message.message_id)


@dp.callback_query(F.data.startswith('approve_payment_'))
async def admin_approve_payment(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    user_id = int(data[2])
    order_id = int(data[3])
    try:
        user_chat = await bot.get_chat(user_id)
        user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
    except Exception:
        user_username = f"User ID: {user_id}"

    await db.update_order_status(order_id, '–û–ø–ª–∞—á–µ–Ω–æ')
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"Error sending payment approval message to user {user_id}: {e}")

    new_caption = f"{callback.message.caption}\n\n‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}."
    try:
        await callback.message.edit_caption(new_caption)
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error updating reply_markup: {e}")

    await process_order_for_admin(order_id, user_username, user_id)
    await callback.answer()


# ======================================================================
# 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–∫–∏–¥–æ–∫

@dp.callback_query(F.data.startswith('approve_') & ~F.data.startswith('approve_payment_'))
async def admin_approve_discount(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('_')
    discount_type = data[1]
    user_id = int(data[2])
    try:
        user_chat = await bot.get_chat(user_id)
        user_username = f"@{user_chat.username}" if user_chat.username else user_chat.full_name
    except Exception:
        user_username = f"User ID: {user_id}"

    await db.add_discount(user_id, discount_type)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(ADMIN_ID,
                           f"‚úÖ –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–Ω–∏–∂–∫—É '{discount_type.upper()}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_username}.")
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–Ω–∏–∂–∫–∞ '{discount_type.upper()}' –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"Error sending discount approval message to user {user_id}: {e}")

    new_caption = f"{callback.message.caption}\n\n‚úÖ –ó–Ω–∏–∂–∫—É '{discount_type.upper()}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_username} —Å—Ö–≤–∞–ª–µ–Ω–æ."
    try:
        await callback.message.edit_caption(new_caption)
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error updating reply_markup: {e}")

    await callback.answer()


# ======================================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)

async def calculate_price(product, user_id):
    base_price = 1150 if product.get('model_id', '').startswith('ts') else 1350
    total_discount = 0.0
    discounts = await db.get_user_discounts(user_id)
    discount_details = []
    if discounts.get('ubd'):
        total_discount += 0.10
        discount_details.append('üéñÔ∏è 10% –∑–∞ –£–ë–î')
    if discounts.get('repost'):
        total_discount += 0.10
        discount_details.append('üîÑ 10% –∑–∞ —Ä–µ–ø–æ—Å—Ç')
    final_price = int(base_price * (1 - total_discount))
    discount_text = (f"üéÅ **–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞:** {' + '.join(discount_details)}"
                     if discount_details else "üéÅ **–ó–Ω–∏–∂–∫–∏ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ**")
    return final_price, discount_text


async def format_order_text(order, order_id, username, user_id):
    product_code = order.get('product')
    product = '–§—É—Ç–±–æ–ª–∫–∞' if product_code.startswith('ts') else '–•—É–¥—ñ'
    size = order.get('size', '–ù–µ –æ–±—Ä–∞–Ω–æ')
    discounts = await db.get_user_discounts(user_id)
    discounts_text = []
    if discounts.get('ubd'):
        discounts_text.append('üéñÔ∏è –£–ë–î - 10%')
    if discounts.get('repost'):
        discounts_text.append('üîÑ –†–µ–ø–æ—Å—Ç - 10%')
    discounts_str = ', '.join(discounts_text) if discounts_text else '‚ùå –ù–µ–º–∞—î'
    price = order.get('price', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    options_text = ""
    if product == '–§—É—Ç–±–æ–ª–∫–∞':
        if order.get('made_in_ukraine'):
            options_text += "‚úÖ Made in Ukraine –ø—Ä–∏–Ω—Ç\n"
        if order.get('back_text'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—ñ–¥–ø–∏—Å\n"
        if order.get('back_print'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—Ä–∏–Ω—Ç\n"
    elif product == '–•—É–¥—ñ':
        if order.get('collar'):
            options_text += "‚úÖ –ì–æ—Ä–ª–æ–≤–∏–Ω–∞\n"
        if order.get('sleeve_text'):
            options_text += "‚úÖ –ù–∞–¥–ø–∏—Å–∏ –Ω–∞ —Ä—É–∫–∞–≤–∞—Ö\n"
        if order.get('back_print'):
            options_text += "‚úÖ –ó–∞–¥–Ω—ñ–π –ø—Ä–∏–Ω—Ç\n"
    options_text = "\n**–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:**\n" + options_text if options_text else "\n**–í–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó:**\n‚ùå –ù–µ–º–∞—î"
    rejection_reason_text = f"\n‚ùå **–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:** {order.get('rejection_reason')}" if order.get(
        'rejection_reason') else ""
    ttn_text = f"\nüì¶ **–¢–¢–ù:** {order.get('ttn')}" if order.get('ttn') else ""
    text = (
        f"üìù **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}**\n"
        f"üõçÔ∏è **–¢–æ–≤–∞—Ä:** {product}\n"
        f"üìè **–†–æ–∑–º—ñ—Ä:** {size}\n"
        f"üèôÔ∏è **–ú—ñ—Å—Ç–æ:** {order.get('city')}\n"
        f"üè¢ **–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:** {order.get('branch')}\n"
        f"üßë **–ü–Ü–ë:** {order.get('name')}\n"
        f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {order.get('phone')}\n"
        f"üí≥ **–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:** {'üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É' if order.get('payment_method') == 'card' else 'üí∞ –ü–ª–∞—Ç–∞ –Ω–∞ –ø–æ—à—Ç—ñ'}\n"
        f"üéñÔ∏è **–ó–Ω–∏–∂–∫–∏:** {discounts_str}\n"
        f"üí∏ **–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:** {price} –≥—Ä–Ω"
        f"{options_text}"
        f"{rejection_reason_text}"
        f"{ttn_text}"
    )
    return text


def get_statuses_from_order_status(order_status):
    statuses = {'ready': False, 'sent': False, 'delivered': False}
    if order_status in ['–ù–æ–≤–µ', '–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞', '–û—á—ñ–∫—É—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏', '–û–ø–ª–∞—á–µ–Ω–æ']:
        statuses['ready'] = False
    elif order_status == '–ì–æ—Ç–æ–≤–æ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏':
        statuses['ready'] = True
    elif order_status == '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ':
        statuses['ready'] = True
        statuses['sent'] = True
    elif order_status == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
        statuses['ready'] = True
        statuses['sent'] = True
        statuses['delivered'] = True
    return statuses


async def get_order_image_url(order):
    if not os.path.exists(PRODUCTS_JSON_PATH):
        return "https://i.ibb.co/cx351Lx/1-2.png"
    with open(PRODUCTS_JSON_PATH, 'r', encoding='utf-8') as f:
        products = json.load(f)
    category = 't_shirts' if order['product'].startswith('ts') else 'hoodies'
    category_products = products.get(category, [])
    product_data = next((p for p in category_products if p['model_id'] == order['product']), None)
    if product_data:
        colors = product_data.get('colors', [])
        index = order.get('selected_color_index', 0)
        if colors and 0 <= index < len(colors):
            return colors[index]
    return "https://i.ibb.co/cx351Lx/1-2.png"

NOVA_POSHTA_API_KEY = os.environ.get("NOVA_POSHTA_API_KEY")

async def get_nova_poshta_status(ttn: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ—Å—ã–ª–∫–∏.
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–± –æ—à–∏–±–∫–µ.
    """
    url = "https://api.novaposhta.ua/v2.0/json/"
    payload = {
        "apiKey": NOVA_POSHTA_API_KEY,
        "modelName": "TrackingDocument",
        "calledMethod": "getStatusDocuments",
        "methodProperties": {
            "Documents": [
                {
                    "DocumentNumber": ttn,
                    "Phone": ""  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
                }
            ]
        }
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as resp:
                data = await resp.json()
                # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ data['data'] ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                doc_info = data.get('data', [])
                if not doc_info:
                    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏."
                doc = doc_info[0]
                # –ò–∑ doc –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–π:
                #   Status, StatusCode, WarehouseRecipientAddress, DeliveryDate, RecipientDateTime –∏ —Ç.–¥.
                return doc.get('Status', '–°—Ç–∞—Ç—É—Å –Ω–µ–≤—ñ–¥–æ–º–∏–π')
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é: {e}"


@dp.callback_query(F.data.startswith('order_details_'))
async def order_details_callback(callback: CallbackQuery, state: FSMContext):
    # –ü–∞—Ä—Å–∏–º order_id –∏–∑ —Å—Ç—Ä–æ–∫–∏ "order_details_123"
    parts = callback.data.split('_')
    # parts[0] = "order", parts[1] = "details", parts[2] = "{order_id}"
    order_id = int(parts[2])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î –ø–æ ID
    order = await db.get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –ï—Å–ª–∏ TTN –Ω–µ—Ç -> –≤—ã–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –µ—Å—Ç—å -> –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ù–ü
    ttn = order.get('ttn')
    local_status = order.get('status', '–ù–µ–≤—ñ–¥–æ–º–∏–π')

    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é format_order_text –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
    order_text = await format_order_text(order, order_id, callback.from_user.username, callback.from_user.id)

    if not ttn:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î –∏ –ø–∏—à–µ–º, —á—Ç–æ TTN –Ω–µ—Ç
        message_text = (
            f"{order_text}\n\n"
            f"–°—Ç–∞—Ç—É—Å (–∑ –ë–î): {local_status}\n"
            f"TTN: –ù–µ–º–∞—î\n"
        )
        await callback.message.answer(message_text, parse_mode='Markdown')
    else:
        # –ï—Å–ª–∏ TTN –µ—Å—Ç—å, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã
        np_status = await get_nova_poshta_status(ttn)  # –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        message_text = (
            f"{order_text}\n\n"
            f"üì¶ **–°—Ç–∞—Ç—É—Å –∑ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:** {np_status}\n"
            f"TTN: {ttn}"
        )
        await callback.message.answer(message_text, parse_mode='Markdown')

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–ª–±—ç–∫—É, —á—Ç–æ–±—ã Telegram –Ω–µ –¥—É–º–∞–ª, —á—Ç–æ –±–æ—Ç –∑–∞–≤–∏—Å
    await callback.answer()

async def auto_check_nova_poshta():
    """
    –†–∞–∑ –≤ —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º != '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' –∏ != '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
    —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å TTN. –ï—Å–ª–∏ '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ' ‚Äî —Å—Ç–∞–≤–∏–º '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
    –ø–∏—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É.
    """
    while True:
        try:
            orders = await get_orders_not_delivered()  # –≤—Å–µ, —É –∫–æ–≥–æ status != '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' / '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ'
            for order in orders:
                order_id = order['id']
                ttn = order.get('ttn')
                if not ttn:
                    continue  # –Ω–µ—Ç TTN ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                np_status = await get_nova_poshta_status(ttn)
                if "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ" in np_status:
                    # 1) –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
                    await update_order_status(order_id, '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')

                    # 2) –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_id = order['user_id']
                    user_message = (
                        f"–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n"
                        f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù {ttn} —â–æ–π–Ω–æ –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ "
                        f"—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏. –ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!"
                    )
                    try:
                        await bot.send_message(user_id, user_message)
                    except Exception as e:
                        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

                    # 3) –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    admin_message = (
                        f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑ TTN: {ttn} "
                        f"–æ—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."
                    )
                    try:
                        await bot.send_message(ADMIN_ID, admin_message)
                    except Exception as e:
                        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

                    logging.info(f"–ó–∞–∫–∞–∑ #{order_id} (TTN {ttn}) –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ auto_check_nova_poshta: {e}")

        # –ñ–¥—ë–º 1 —á–∞—Å –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        await asyncio.sleep(3600)

@dp.callback_query(F.data.startswith('order_create_ttn_'))
async def admin_create_ttn_start(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–∏–º–µ—Ä callback_data: "order_create_ttn_123"
    parts = callback.data.split('_')  # ["order", "create", "ttn", "123"]
    order_id = int(parts[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
    await state.update_data(order_id=order_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_city
    await state.set_state(AdminTtnFlow.waiting_for_city)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–ö–∏—ó–≤', callback_data='sender_city_kyiv'),
            InlineKeyboardButton(text='–•–∞—Ä–∫—ñ–≤', callback_data='sender_city_kharkiv')
        ]
    ])
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:", reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(AdminTtnFlow.waiting_for_city, F.data.startswith('sender_city_'))
async def admin_choose_city(callback: CallbackQuery, state: FSMContext):
    # sender_city_kyiv –∏–ª–∏ sender_city_kharkiv
    city_code = callback.data.split('_')[2]  # "kyiv" –∏–ª–∏ "kharkiv"
    # –°–æ—Ö—Ä–∞–Ω–∏–º —ç—Ç–æ –≤ FSM
    await state.update_data(sender_city=city_code)

    # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç
    await state.set_state(AdminTtnFlow.waiting_for_payer)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–ù–∞–ª–æ–∂–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂', callback_data='payer_cod'),
            InlineKeyboardButton(text='–Ø –æ–ø–ª–∞—á—É—é', callback_data='payer_sender')
        ]
    ])
    await callback.message.answer("–•—Ç–æ –æ–ø–ª–∞—á—É—î –¥–æ—Å—Ç–∞–≤–∫—É?", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(AdminTtnFlow.waiting_for_payer, F.data.in_(['payer_cod', 'payer_sender']))
async def admin_choose_payer(callback: CallbackQuery, state: FSMContext):
    payer_type = callback.data  # "payer_cod" –∏–ª–∏ "payer_sender"
    await state.update_data(payer_type=payer_type)

    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, –∑ —è–∫–æ–≥–æ –≤–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 52).")
    await state.set_state(AdminTtnFlow.waiting_for_sender_branch)
    await callback.answer()
@dp.message(AdminTtnFlow.waiting_for_sender_branch)
async def admin_input_sender_branch(message: Message, state: FSMContext):
    branch = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(sender_branch=branch)

    # + —Ç–µ–ª–µ—Ñ–æ–Ω/–§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –≤ .env
    # –∏–ª–∏ —Ç–æ–∂–µ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥–∏—Ç—å. –î–æ–ø—É—Å—Ç–∏–º, –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º:
    sender_phone = "+380939693920"
    sender_name = "–°–∏–Ω—ñ–ª–æ –ê—Ä—Ç–µ–º –í—ñ—Ç–∞–ª—ñ–π–æ–≤–∏—á"
    await state.update_data(sender_phone=sender_phone, sender_name=sender_name)

    # –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º —Å–≤–æ–¥–∫—É
    data = await state.get_data()
    order_id = data['order_id']
    order = await db.get_order_by_id(order_id)
    if not order:
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å.")
        await state.clear()
        return

    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = order['name']
    user_phone = order['phone']
    user_city = order['city']
    user_branch = order['branch']
    price = order.get('price', 0)  # —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞

    # –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏
    city_code = data['sender_city']  # "kyiv" / "kharkiv"
    city_sender_name = "–ö–∏—ó–≤" if city_code == "kyiv" else "–•–∞—Ä–∫—ñ–≤"
    payer_type = data['payer_type'] # "payer_cod" / "payer_sender"
    if payer_type == 'payer_cod':
        payer_str = f"–ù–∞–ª–æ–∂–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂, —Å—É–º–∞: {price} –≥—Ä–Ω"
    else:
        payer_str = "–û–ø–ª–∞—á—É—î –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ (–≤–∏)"

    # –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary = (
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¢–¢–ù:\n\n"
        f"–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {sender_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: {sender_phone}\n"
        f"–ú—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: {city_sender_name}\n"
        f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞: {branch}\n\n"

        f"–û—Ç—Ä–∏–º—É–≤–∞—á: {user_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: {user_phone}\n"
        f"–ú—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: {user_city}\n"
        f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: {user_branch}\n\n"

        f"–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {payer_str}\n"
        f"–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {price} –≥—Ä–Ω\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¢–¢–ù?"
    )
    # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='confirm_create_ttn'),
            InlineKeyboardButton(text='‚ùå –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ', callback_data='re_enter_ttn')
        ]
    ])
    await message.answer(summary, reply_markup=keyboard)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_confirm
    await state.set_state(AdminTtnFlow.waiting_for_confirm)


@dp.callback_query(AdminTtnFlow.waiting_for_confirm, F.data.in_(['confirm_create_ttn', 're_enter_ttn']))
async def admin_confirm_ttn(callback: CallbackQuery, state: FSMContext):
    if callback.data == 're_enter_ttn':
        # –í–µ—Ä–Ω—ë–º—Å—è –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(AdminTtnFlow.waiting_for_sender_branch)
        await callback.answer()
        return

    # –ò–Ω–∞—á–µ confirm_create_ttn
    data = await state.get_data()
    order_id = data['order_id']
    order = await db.get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è JSON
    sender_city_code = data['sender_city']  # "kyiv"/"kharkiv"
    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å:
    city_sender_text = "–º.–ö–∏—ó–≤" if sender_city_code == "kyiv" else "–º.–•–∞—Ä–∫—ñ–≤"
    sender_branch = data['sender_branch']
    sender_phone = data['sender_phone']
    sender_name = data['sender_name']

    user_name = order['name']
    user_phone = order['phone']
    user_city = order['city']
    user_branch = order['branch']
    price = order.get('price', 0)

    payer_type = data['payer_type']  # "payer_cod" / "payer_sender"
    # –ª–æ–≥–∏–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ / –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç
    # PayerType = 'Recipient' / 'Sender'
    # PaymentMethod = 'Cash'
    if payer_type == 'payer_cod':
        # –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂, –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç
        doc_payer_type = "Recipient"
        cost = str(price)  # –æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        backward_delivery = True
    else:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç, –æ–ø–ª–∞—Ç–∞ –±–µ–∑–Ω–∞–ª –∏–ª–∏ –Ω–∞–ª - –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä
        doc_payer_type = "Sender"
        cost = str(price)
        backward_delivery = False

    # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —Å–æ–∑–¥–∞—é—â—É—é –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ù–æ–≤–æ–π –ü–æ—á—Ç–µ
    # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
    ttn, error_msg = await create_nova_poshta_document(
        user_data={
            'fullname': user_name,
            'phone': user_phone,
            'city': user_city,
            'branch': user_branch
        },
        sender_data={
            'sender_name': sender_name,
            'sender_phone': sender_phone,
            'sender_city': city_sender_text,
            'sender_branch': sender_branch
        },
        payer_type=doc_payer_type,
        cost=cost,
        backward_delivery=backward_delivery
    )
    if error_msg:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
        await callback.message.answer(
            f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¢–¢–ù: {error_msg}\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –≤—Ä—É—á–Ω—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        await state.set_state(AdminTtnFlow.waiting_for_manual_data)
        await callback.answer()
        return

    # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –¢–¢–ù => —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await db.update_order_ttn(order_id, ttn)
    # –ú–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ì–æ—Ç–æ–≤–æ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏" –∏–ª–∏ "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
    await db.update_order_status(order_id, '–ì–æ—Ç–æ–≤–æ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = order['user_id']
    await bot.send_message(
        user_id,
        f"–î–ª—è –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ –¢–¢–ù: {ttn}.\n"
        "–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è!"
    )
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback.message.answer(
        f"‚úÖ –¢–¢–ù {ttn} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}!",
    )
    await callback.answer()
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


async def create_nova_poshta_document(user_data, sender_data, payer_type, cost, backward_delivery=False):
    """
    user_data = {fullname, phone, city, branch}
    sender_data = {sender_name, sender_phone, sender_city, sender_branch}
    payer_type = 'Sender' –∏–ª–∏ 'Recipient'
    cost = '500'
    backward_delivery = True/False (–Ω–∞–ª–æ–∂–∫–∞)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ttn, None) –∏–ª–∏ (None, error_message)
    """
    import aiohttp

    url = "https://api.novaposhta.ua/v2.0/json/"
    payload = {
        "apiKey": NOVA_POSHTA_API_KEY,  # –∏–∑ .env
        "modelName": "InternetDocument",
        "calledMethod": "save",
        "methodProperties": {
            "NewAddress": "1",
            "PayerType": payer_type,       # "Recipient" / "Sender"
            "PaymentMethod": "Cash",
            "CargoType": "Cargo",
            "VolumeGeneral": "0.1",
            "Weight": "1",
            "ServiceType": "WarehouseWarehouse",
            "SeatsAmount": "1",
            "Description": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞",
            "Cost": cost,  # –æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            "CitySender": sender_data['sender_city'],  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ: "–º.–ö–∏—ó–≤", –Ω–æ –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É –Ω—É–∂–µ–Ω Ref
            "SenderAddress": f"–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {sender_data['sender_branch']}",
            "SendersPhone": sender_data['sender_phone'],
            "Sender": sender_data['sender_name'],

            "RecipientName": user_data['fullname'],
            "RecipientPhone": user_data['phone'],
            "RecipientCityName": f"–º.{user_data['city']}",
            "RecipientAddressName": f"–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ{user_data['branch']}",
            "RecipientType": "PrivatePerson"
        }
    }

    # –ï—Å–ª–∏ –Ω–∞–ª–æ–∂–∫–∞, —É–∫–∞–∑—ã–≤–∞–µ–º BackwardDeliveryData
    if backward_delivery:
        payload["methodProperties"]["BackwardDeliveryData"] = [
            {
                "PayerType": "Recipient",
                "CargoType": "Money",
                "RedeliveryString": cost
            }
        ]

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload) as resp:
            data = await resp.json()
            if not data.get('success'):
                errors = data.get('errors') or []
                warnings = data.get('warnings') or []
                err_msg = ', '.join(errors + warnings)
                return None, f"–ü–æ–º–∏–ª–∫–∞: {err_msg}"

            doc_info = data.get('data', [])
            if not doc_info:
                return None, "–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—É—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ."

            doc = doc_info[0]
            ttn = doc.get('IntDocNumber')
            if not ttn:
                return None, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ IntDocNumber."
            return ttn, None


# ======================================================================
async def main():
    keep_alive()
    await db.init_db()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(auto_check_nova_poshta())
    logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ auto_check_nova_poshta –∑–∞–ø—É—â–µ–Ω–∞.")

    # –¢–µ–ø–µ—Ä—å - polling (–æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())
