import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import os

from app import buttons as kb
from app import database as db

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∑–∞–∫–∞–∑–∞
from aiogram.fsm.state import StatesGroup, State

class OrderStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_branch = State()
    waiting_for_name = State()
    waiting_for_phone = State()

class DiscountStates(StatesGroup):
    waiting_for_ubd_photo = State()
    waiting_for_repost_screenshot = State()

class SupportStates(StatesGroup):
    waiting_for_issue_description = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–í—ñ—Ç–∞—î–º–æ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=kb.main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@dp.message(Text('‚öôÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚öôÔ∏è'))
async def constructor_order(message: Message):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:', reply_markup=kb.product_selection_menu())

@dp.message(Text('–ù–∞ –≥–æ–ª–æ–≤–Ω—É'))
async def back_to_main(message: Message):
    await message.answer('–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', reply_markup=kb.main_menu())

# –í—ã–±–æ—Ä —Ñ—É—Ç–±–æ–ª–∫–∏
@dp.message(Text('üëï - –í–∏–±—Ä–∞—Ç–∏ —Ñ—É—Ç–±–æ–ª–∫—É'))
async def select_tshirt(message: Message, state: FSMContext):
    await state.update_data(product='t_shirt', size=None, back_print=False, back_text=False, made_in_ukraine=False)
    await message.answer('–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —Ñ—É—Ç–±–æ–ª–∫–∏:', reply_markup=kb.t_shirtBtn)

# –í—ã–±–æ—Ä —Ö—É–¥—ñ
@dp.message(Text('ü•∑üèº - –í–∏–±—Ä–∞—Ç–∏ —Ö—É–¥—ñ'))
async def select_hoodie(message: Message, state: FSMContext):
    await state.update_data(product='hoodie', size=None, back_print=False, collar=False)
    await message.answer('–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —Ö—É–¥—ñ:', reply_markup=kb.hoodieBtn)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
@dp.callback_query(Text(startswith='size_'))
async def choose_size(callback: CallbackQuery, state: FSMContext):
    size = callback.data.split('_')[1]
    await state.update_data(size=size)

    data = await state.get_data()
    text = await update_parameters(data)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    if data.get('product') == 't_shirt':
        await callback.message.edit_text(text=text, reply_markup=kb.generate_tshirt_option_buttons(data))
    elif data.get('product') == 'hoodie':
        await callback.message.edit_text(text=text, reply_markup=kb.generate_hoodie_option_buttons(data))
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø—Ü–∏–π
@dp.callback_query(Text(startswith='toggle_'))
async def toggle_option(callback: CallbackQuery, state: FSMContext):
    option = callback.data.split('_')[1]
    data = await state.get_data()
    current_value = data.get(option, False)
    await state.update_data(**{option: not current_value})

    data = await state.get_data()
    text = await update_parameters(data)

    if data.get('product') == 't_shirt':
        await callback.message.edit_text(text=text, reply_markup=kb.generate_tshirt_option_buttons(data))
    elif data.get('product') == 'hoodie':
        await callback.message.edit_text(text=text, reply_markup=kb.generate_hoodie_option_buttons(data))
    await callback.answer()

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"
@dp.callback_query(Text('continue'))
async def continue_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product = data.get('product')

    await send_product_photos(callback.message, product)
    await callback.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞
async def send_product_photos(message: Message, product_type: str):
    product_photos = kb.get_product_photos(product_type)
    for photo in product_photos:
        await message.answer_photo(
            photo=photo['file_id'],
            caption=photo['caption'],
            reply_markup=kb.select_product_button()
        )

# –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(Text('select_product'))
async def select_product(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = await update_parameters(data)
    await callback.message.answer(
        f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{text}",
        reply_markup=kb.payment_options()
    )
    await callback.answer()

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(Text('payment_post'))
async def payment_post(callback: CallbackQuery, state: FSMContext):
    await state.update_data(payment_method='post')
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:")
    await state.set_state(OrderStates.waiting_for_city)
    await callback.answer()

@dp.callback_query(Text('payment_card'))
async def payment_card(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    price = calculate_price(data)
    await callback.message.answer(f"–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {price} –≥—Ä–Ω.\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏: 4441111140615463")
    await callback.message.answer("–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.")
    await state.set_state(OrderStates.waiting_for_payment_confirmation)
    await callback.answer()

# –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message(OrderStates.waiting_for_city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:")
    await state.set_state(OrderStates.waiting_for_branch)

@dp.message(OrderStates.waiting_for_branch)
async def get_branch(message: Message, state: FSMContext):
    await state.update_data(branch=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")
    await state.set_state(OrderStates.waiting_for_name)

@dp.message(OrderStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await state.set_state(OrderStates.waiting_for_phone)

@dp.message(OrderStates.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.save_order(data)
    await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ—ó –∞–∫—Ü—ñ—ó"
@dp.message(Text('üî• –ú–æ—ó –∞–∫—Ü—ñ—ó'))
async def my_promotions(message: Message):
    await message.answer(
        "–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!\n"
        "–û—Ç—Ä–∏–º–∞–π—Ç–µ –∑–Ω–∏–∂–∫—É 10% –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ 10% –ø—Ä–∏ —Ä–µ–ø–æ—Å—Ç—ñ –Ω–∞—à–æ–≥–æ –ø–æ—Å—Ç—É –≤ Instagram!\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏.",
        reply_markup=kb.discounts_menu()
    )

@dp.message(Text('–ü–æ–∫–∞–∑–∞—Ç–∏ –£–ë–î'))
async def send_ubd(message: Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ –£–ë–î.")
    await state.set_state(DiscountStates.waiting_for_ubd_photo)

@dp.message(Text('–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–∫—Ä—ñ–Ω —Ä–µ–ø–æ—Å—Ç—É'))
async def send_repost(message: Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ä–µ–ø–æ—Å—Ç—É –∑ Instagram.")
    await state.set_state(DiscountStates.waiting_for_repost_screenshot)

@dp.message(DiscountStates.waiting_for_ubd_photo, content_types=ContentType.PHOTO)
async def receive_ubd_photo(message: Message, state: FSMContext):
    await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=f"–£–ë–î –≤—ñ–¥ @{message.from_user.username}")
    await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.save_discount_request(message.from_user.id, 'ubd', message.photo[-1].file_id)
    await state.clear()

@dp.message(DiscountStates.waiting_for_repost_screenshot, content_types=ContentType.PHOTO)
async def receive_repost_screenshot(message: Message, state: FSMContext):
    await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=f"–†–µ–ø–æ—Å—Ç –≤—ñ–¥ @{message.from_user.username}")
    await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.save_discount_request(message.from_user.id, 'repost', message.photo[-1].file_id)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞"
@dp.message(Text('üí¨ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞'))
async def info_support(message: Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=kb.info_support_buttons())

@dp.message(Text('–ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é'))
async def contact_support(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫ –º–æ–∂–Ω–∞ —à–≤–∏–¥—à–µ.")
    await state.set_state(SupportStates.waiting_for_issue_description)

@dp.message(SupportStates.waiting_for_issue_description)
async def receive_issue(message: Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{message.from_user.username}: {message.text}")
    await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
    await state.clear()

@dp.message(Text('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—Ä–µ–Ω–¥'))
async def brand_info(message: Message):
    await message.answer(
        "–ú–∏ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±—Ä–µ–Ω–¥ –æ–¥—è–≥—É, —â–æ –ø–æ—î–¥–Ω—É—î –≤—ñ–π—Å—å–∫–æ–≤—É –µ—Å—Ç–µ—Ç–∏–∫—É —Ç–∞ —Å—É—á–∞—Å–Ω–∏–π —Å—Ç–∏–ª—å.\n"
        "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–∞–º–∏ –≤ Instagram: https://www.instagram.com/twocomms/"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∏–Ω—Ç"
@dp.message(Text('üñºÔ∏è –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∏–Ω—Ç'))
async def propose_print(message: Message):
    await message.answer(
        "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –±–∞—á–∏—Ç–∏ –≤ —è–∫–æ—Å—Ç—ñ –ø—Ä–∏–Ω—Ç–∞.",
        reply_markup=kb.propose_print_buttons()
    )

@dp.message(Text('–°—Ç–∞—Ç–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º'))
async def become_designer(message: Message):
    await message.answer("–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ: @zainllw0w")

@dp.message(content_types=ContentType.PHOTO)
async def receive_proposed_print(message: Message):
    await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=f"–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—Ä–∏–Ω—Ç–∞ –≤—ñ–¥ @{message.from_user.username}")
    await message.answer("–î—è–∫—É—î–º–æ! –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –≤–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–∫–∞–∑–∞
async def update_parameters(data):
    if data.get('product') == 't_shirt':
        text = (
            f"–í–∞—à –≤–∏–±—ñ—Ä:\n"
            f"–†–æ–∑–º—ñ—Ä —Ñ—É—Ç–±–æ–ª–∫–∏: {data.get('size', '–Ω–µ –æ–±—Ä–∞–Ω–æ')}\n"
            f"–ó–∞–¥–Ω—ñ–π –ø—Ä–∏–Ω—Ç: {'–≤–∫–ª—é—á–µ–Ω–æ' if data.get('back_print') else '–≤–∏–º–∫–Ω–µ–Ω–æ'}\n"
            f"–ó–∞–¥–Ω—è –Ω–∞–¥–ø–∏—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if data.get('back_text') else '–≤–∏–º–∫–Ω–µ–Ω–æ'}\n"
            f"Made in Ukraine: {'–≤–∫–ª—é—á–µ–Ω–æ' if data.get('made_in_ukraine') else '–≤–∏–º–∫–Ω–µ–Ω–æ'}"
        )
    elif data.get('product') == 'hoodie':
        text = (
            f"–í–∞—à –≤–∏–±—ñ—Ä:\n"
            f"–†–æ–∑–º—ñ—Ä —Ö—É–¥—ñ: {data.get('size', '–Ω–µ –æ–±—Ä–∞–Ω–æ')}\n"
            f"–ì–æ—Ä–ª–æ–≤–∏–Ω–∞: {'—î' if data.get('collar') else '–Ω–µ–º–∞—î'}\n"
            f"–ó–∞–¥–Ω—ñ–π –ø—Ä–∏–Ω—Ç: {'–≤–∫–ª—é—á–µ–Ω–æ' if data.get('back_print') else '–≤–∏–º–∫–Ω–µ–Ω–æ'}"
        )
    else:
        text = "–í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä."
    return text

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã
def calculate_price(data):
    base_price = 1150 if data.get('product') == 't_shirt' else 1500
    discount = 0.0
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–æ–±—Ä–µ–Ω—ã –ª–∏ —Å–∫–∏–¥–∫–∏
    if data.get('ubd_approved'):
        discount += 0.10
    if data.get('repost_approved'):
        discount += 0.10
    final_price = base_price * (1 - discount)
    return int(final_price)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import logging
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
