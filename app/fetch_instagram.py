# app/fetch_instagram.py

import requests
import json
import os
from datetime import datetime
import re
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("fetch_instagram.log"),  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

INSTAGRAM_BUSINESS_ACCOUNT_ID = os.getenv('INSTAGRAM_BUSINESS_ACCOUNT_ID')
ACCESS_TOKEN = os.getenv('INSTAGRAM_ACCESS_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not INSTAGRAM_BUSINESS_ACCOUNT_ID or not ACCESS_TOKEN:
    logging.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å INSTAGRAM_BUSINESS_ACCOUNT_ID –∏ ACCESS_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
    exit(1)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PRODUCTS_JSON_PATH = os.path.join(BASE_DIR, 'products.json')

# –•–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
HASHTAG_TS = '#ts'
HASHTAG_HD = '#hd'

def get_recent_media():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    url = f'https://graph.facebook.com/v21.0/{INSTAGRAM_BUSINESS_ACCOUNT_ID}/media'
    params = {
        'fields': 'id,caption,media_type,media_url,permalink,timestamp,children{media_type,media_url}',
        'access_token': ACCESS_TOKEN,
        'limit': 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data.get('data', []))} –º–µ–¥–∏–∞-–ø–æ—Å—Ç–æ–≤.")
        return data.get('data', [])
    except requests.exceptions.HTTPError as http_err:
        logging.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {http_err}")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {err}")
    return []

def load_existing_products():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    if not os.path.exists(PRODUCTS_JSON_PATH):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        logging.info("–§–∞–π–ª products.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
        return {
            "t_shirts": [],
            "hoodies": []
        }
    try:
        with open(PRODUCTS_JSON_PATH, 'r', encoding='utf-8') as f:
            products = json.load(f)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products.get('t_shirts', []))} —Ñ—É—Ç–±–æ–ª–æ–∫ –∏ {len(products.get('hoodies', []))} —Ö—É–¥—ñ –∏–∑ products.json.")
            return products
    except json.JSONDecodeError:
        logging.warning("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
        return {
            "t_shirts": [],
            "hoodies": []
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return {
            "t_shirts": [],
            "hoodies": []
        }

def save_products(products):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ JSON —Ñ–∞–π–ª.
    """
    try:
        with open(PRODUCTS_JSON_PATH, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=4)
        logging.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {PRODUCTS_JSON_PATH}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")

def extract_hashtags(caption):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –ø–æ—Å—Ç–∞.
    """
    if not caption:
        return []
    hashtags = re.findall(r'#\w+', caption.lower())
    return hashtags

def fetch_and_update_products():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    """
    logging.info("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    media = get_recent_media()
    if not media:
        logging.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–¥–∏–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    products = load_existing_products()
    t_shirts = products.get('t_shirts', [])
    hoodies = products.get('hoodies', [])

    # –°–æ–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ model_id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    existing_ts_ids = {item['model_id']: item for item in t_shirts}
    existing_hd_ids = {item['model_id']: item for item in hoodies}

    new_products_count = 0

    for post in media:
        caption = post.get('caption', '').lower()
        hashtags = extract_hashtags(caption)
        logging.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç ID: {post.get('id')}, —Ö—ç—à—Ç–µ–≥–∏: {hashtags}")

        is_ts = HASHTAG_TS in hashtags
        is_hd = HASHTAG_HD in hashtags

        if not (is_ts or is_hd):
            logging.info("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –Ω—É–∂–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤.")
            continue

        product_type = 't_shirts' if is_ts else 'hoodies'
        logging.info(f"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {product_type}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        media_type = post.get('media_type')
        images = []

        if media_type == 'IMAGE':
            images.append(post.get('media_url'))
        elif media_type == 'CAROUSEL_ALBUM':
            children = post.get('children', {}).get('data', [])
            for child in children:
                if child.get('media_type') == 'IMAGE':
                    images.append(child.get('media_url'))
        else:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç —Å —Ç–∏–ø–æ–º –º–µ–¥–∏–∞: {media_type}")
            continue

        if not images:
            logging.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post.get('id')} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            continue

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º model_id –∏ model_name
        model_id = f"{'ts' if product_type == 't_shirts' else 'hd'}{post.get('id')}"
        model_name = f"{'–§—É—Ç–±–æ–ª–∫–∞' if product_type == 't_shirts' else '–•—É–¥—ñ'} Model {post.get('id')[-4:]}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –º–æ–¥–µ–ª—å
        existing_products = existing_ts_ids if product_type == 't_shirts' else existing_hd_ids

        if model_id in existing_products:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
            existing_product = existing_products[model_id]
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            existing_images = set(existing_product.get('colors', []))
            new_images = [img for img in images if img not in existing_images]
            if new_images:
                existing_product['colors'].extend(new_images)
                logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å {model_name}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_images)} –Ω–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤.")
            else:
                logging.info(f"üîÑ –ú–æ–¥–µ–ª—å {model_name} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
            new_model = {
                "model_id": model_id,
                "model_name": model_name,
                "colors": images
            }
            if product_type == 't_shirts':
                t_shirts.append(new_model)
                existing_ts_ids[model_id] = new_model
            else:
                hoodies.append(new_model)
                existing_hd_ids[model_id] = new_model

            new_products_count += 1
            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è {product_type[:-1].capitalize()}: {model_name} —Å {len(images)} —Ü–≤–µ—Ç–∞–º–∏.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products['t_shirts'] = t_shirts
    products['hoodies'] = hoodies

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON —Ñ–∞–π–ª
    save_products(products)

    logging.info(f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ {new_products_count} –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")

if __name__ == '__main__':
    fetch_and_update_products()
